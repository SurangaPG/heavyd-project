<?xml version="1.0" encoding="UTF-8" ?>

<project name="HeavyD" default="project:help">

    <!--
        Property bundle loading

        Ensure that the full property date is written out in the file system.
        This is to make it easier to add extra properties etc to the project set.

        All the .yml files in the /properties/dist, env and local folder are combined and aggregated
        into a basic set.
    -->
    <!-- Include custom property loading tasks -->
    <includepath classpath="${project.basedir}/.heavyd/vendor/surangapg/phing-property-bundle/src" />

    <taskdef classname="PropertyDirWriteTask" name="property-dir-write" />
    <taskdef classname="PropertyDirLoadTask" name="property-dir" />

    <if>
        <not>
            <isset property="current.basePath" />
        </not>
        <then>
            <echo message="No custom basepath set, using project.basedir" />
            <property name="current.basePath" value="${project.basedir}" />
        </then>
    </if>

    <property name="output.FULL_PROPERTIES_EXIST" value="false" />
    <exec command="if [ -f '${project.basedir}/properties/bin.yml' ]; then echo 'true'; else echo 'false'; fi;" outputProperty="output.FULL_PROPERTIES_EXIST" />
    <if>
        <equals arg1="${output.FULL_PROPERTIES_EXIST}" arg2="false" />
        <then>
            <echo message="full property files don't appear to be generated yet, generating on the fly via property-dir-write" />
            <property-dir-write originDir="${project.basedir}/properties"
                                subLevels="dist,site,stage,env"
                                outputDir="${project.basedir}/properties"
                                order="project,dir,bin,behat"
                                override="true"
                                outputFull="false"
            />
        </then>
    </if>

    <!-- Loads the full property files from the base dir -->
    <property-dir propertyDir="${project.basedir}/properties"/>

    <!-- Auto include all the heavyd build files in the vendor dirs. -->
    <import>
        <fileset dir="${project.basedir}/.heavyd/vendor/surangapg/heavyd-project/lib/phing">
            <patternset>
                <include name="build.*.xml"/>
            </patternset>
        </fileset>
    </import>

    <target name="project:install" description="Installs a full website from scratch.">
        <property name="domain.for.install" value="${host.default.domain}" />
        <fail unless="domain.for.install" message="Pass the local domain (without a trailing slash and with http(s):// prefix) e.g -Ddomain.for.install=https://mylocaldomain.local "/>
        <phingcall target="project:unlock" />

        <!-- Default values -->
        <property name="final.env" value="local" />
        <property name="final.stage" value="dev" />
        <property name="site.to.activate" value="default" />

        <!-- Enable the install time data -->
        <property name="env.to.activate" value="${final.env}" override="true" />
        <property name="stage.to.activate" value="install" override="true" />

        <phingcall target="project:activate-env" />
        <phingcall target="project:activate-stage" />

        <!-- @TODO Look into the mails being sent during install? -->
        <phingcall target="drush:site-install" />

        <!-- Install the final stage (was forced to install to prevent issues) -->
        <phingcall target="project:unlock" />
        <property name="stage.to.activate" value="${final.stage}" override="true" />
        <phingcall target="project:activate-stage" />

        <phingcall target="project:import-default-content" />

        <exec passthru="true" command="${bin.drush} uli --uri=${host.default.domain}" dir="${dir.web.root}"/>
    </target>

    <!-- Similar to install except that it is a lot faster, allowing for faster branch switches -->
    <target name="project:update" description="Updates a local installation to be up to date with the default content/config in the project. This is a faster switch but it's less complete than a full install.">
        <!-- @TODO Implement this, it should reimport all the config/content without reinstalling the site. -->
    </target>

    <!-- Similar to install except that it prevents any form of file manipulation (handy for platform. Do not that this means the settings.php can't contain any non-install time valid cache ssettings -->
    <target name="project:reset" description="Resets an installation to its chosen profile without triggering any file changes.">
        <property name="domain.for.install" value="${host.default.domain}" />

        <phingcall target="drush:site-install" />
        <phingcall target="project:import-default-content" />
    </target>

    <!-- Similar to install except that it is a lot faster, allowing for faster branch switches -->
    <target name="project:pack" description="Package in an artifact for this project. This will generate a full data package and then save some it to the artifact folder. Making all the following installs for other devs a lot faster.">
        <!-- @TODO Implement this, it should  reinstall and then make an artifact based on the data. -->
    </target>

    <!-- Similar to install except that it is a lot faster, allowing for faster branch switches -->
    <target name="project:unpack" description="Unpacks the data from the artifacts. This will make it a lot faster to install a site provided a dev has previously packed the data.">
        <!-- @TODO Implement this, it should  reinstall and then make an artifact based on the data. -->
    </target>

    <!-- Crude but effective for now -->
    <target name="project:export-content">
        <property name="active.to.site" value="default"/>
        <property name="active.to.stage" value="${project.basedir}/${project.active.stage}"/>

        <fail unless="active.to.stage" message="No stage to export to has been specified and none is currently active."/>

        <delete dir="${project.basedir}/${dir.etc.site}/${active.to.site}/stages/${active.to.stage}/staged_content" />
        <delete dir="${project.basedir}/${dir.etc.site}/${active.to.site}/stages/${active.to.stage}/staged_fixtures" />

        <!-- Enable the needed module(s) -->
        <echo message="Enabling needed modules"/>
        <exec passthru="true"
              command="${bin.drush} en staged_content -y "
              dir="${project.basedir}/${dir.web.root}/sites/${active.to.site}"/>

        <!-- Export all the content -->
        <phingcall target="drush:export-content-with-id">
            <property name="entity.to.export" value="node" override="true"/>
        </phingcall>

        <phingcall target="drush:export-content">
            <property name="entity.to.export" value="menu_link_content" override="true"/>
        </phingcall>

        <phingcall target="drush:export-content">
            <property name="entity.to.export" value="taxonomy_term" override="true"/>
        </phingcall>

        <phingcall target="drush:export-content">
            <property name="entity.to.export" value="user" override="true"/>
        </phingcall>

        <phingcall target="drush:export-content">
            <property name="entity.to.export" value="block_content" override="true"/>
        </phingcall>

        <!-- Enable the needed module(s) -->
        <echo message="Disable needed modules"/>

        <exec passthru="true"
              command="${bin.drush} pm-uninstall staged_content -y "
              dir="${project.basedir}/${dir.web.root}/sites/${active.to.site}"/>

        <staged-fixtures-export
                stagedContentDir="${project.basedir}/${dir.etc.site}/${active.to.site}/stages/${active.to.stage}/staged_content"
                stagedFixtureDir="${project.basedir}/${dir.etc.site}/${active.to.site}/stages/${active.to.stage}/staged_fixtures"
                publicFileSystemRoot="${dir.files.public}" />
    </target>

    <target name="project:import-content">
        <property name="active.to.stage" value="${project.active.stage}" />
        <property name="active.to.site" value="${project.active.site}" />
        <!-- Ensure all the fixtures are in the correct place. -->
        <echo message="Setting up Fixtures." />
        <exec passthru="true" command="rsync -vr ${project.basedir}/${dir.etc.site}/${project.active.site}/stages/${project.active.stage}/staged_fixtures/public/ ${project.basedir}/${dir.files.public}/" />

        <echo message="Adding baseline content" />
        <exec passthru="true" command="${bin.drush} en staged_content -y" dir="${dir.web.root}" checkreturn="true"/>

        <phingcall target="drush:staged-content-import" />

        <echo message="Removing setup time modules" />
        <exec passthru="true" command="${bin.drush} pm-uninstall staged_content -y" dir="${dir.web.root}" />

    </target>

    <target name="project:property-cleanse" description="Cleanses a project of all properties etc.">
        <phingcall target="property:cleanse" />
    </target>

    <target name="project:write-property-files" description="Regenerate all the property files.">
        <phingcall target="property:write-full" />
    </target>

    <target name="project:activate-site" description="Activates a the correct site (e.g default or another directory under the sites dir).">
        <phingcall target="property:cleanse-site" />
        <phingcall target="property:cleanse-generated" />
        <phingcall target="property:activate-site" />
        <phingcall target="property:write-full" />
    </target>

    <target name="project:activate-env" description="Activates a full environment">
        <phingcall target="property:cleanse-env" />
        <phingcall target="property:cleanse-generated" />
        <phingcall target="property:activate-env" />
        <phingcall target="property:write-full" />
        <phingcall target="drupal:env:activate-etc-files" />
    </target>

    <target name="project:activate-stage" description="Activates a the correct stage (e.g production, acc, etc) for a given site (dir).">
        <phingcall target="property:cleanse-stage" />
        <phingcall target="property:cleanse-generated" />
        <phingcall target="property:activate-stage" />
        <phingcall target="property:write-full" />
        <phingcall target="drupal:stage:activate-etc-files" />
    </target>

    <target name="project:export-translations">
        <phingcall target="drush:export-translations" />
    </target>

    <target name="project:import-translations">
        <phingcall target="drush:cc-self" />
        <phingcall target="drush:import-translations" />
    </target>

    <target name="project:unlock">
        <exec passthru="true" command="chmod -R u+w ${project.basedir}" />
    </target>

    <target name="project:setup-services" description="Setup all the docker containers connected to this project.">
        <phingcall target="docker:setup" />
    </target>

    <target name="project:start-services" description="Start all the docker containers connected to this project.">
        <phingcall target="docker:solr:start" />
    </target>

    <target name="project:stop-services" description="Stop all the docker containers connected to this project.">
        <phingcall target="docker:solr:start" />
    </target>

    <target name="project:help">
        <exec passthru="true" command="${bin.phing} -l" />
    </target>

    <target name="project:selenium-start" description="Start a stand alone selenium container.">
        <phingcall target="docker:selenium-start" />
    </target>

    <target name="project:selenium-start-debug" description="Start a stand alone selenium container in debug mode.">
        <phingcall target="docker:selenium-bridged-start" />
    </target>

    <target name="project:selenium-stop" description="Stop the selenium container.">
        <phingcall target="docker:selenium-stop" />
    </target>

    <target name="project:run-behat">
        <phingcall target="behat:setup-config" />
        <phingcall target="behat:run-tests" />
    </target>

    <target name="project:install-dependencies" description="Install all the composer dependecies for the project.">
        <phingcall target="composer:full" />
    </target>

    <target name="project:build" description="Builds an entire environment up from scratch.">
        <phingcall target="composer:build" />
    </target>

</project>
