<?php

namespace surangapg\Heavyd;

use surangapg\Heavyd\Command\Docker\SeleniumCommand;
use surangapg\Heavyd\Engine\EngineInterface;
use surangapg\Heavyd\Engine\PhingEngine;

use surangapg\HeavydComponents\Properties\Properties;
use surangapg\HeavydComponents\Properties\PropertiesInterface;

use surangapg\Heavyd\Command\Misc\SetupCommand as MiscSetupCommand;
use surangapg\Heavyd\Command\Misc\InstallCommand as MiscInstallCommand;
use surangapg\Heavyd\Command\Misc\ResetCommand as MiscResetCommand;

use surangapg\HeavydComponents\Scope\ScopeInterface;

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;

use Symfony\Component\Filesystem\Filesystem;

class HeavydApplication extends Application {

  /**
   * The current version of the application. This will be used to validate
   * or the correct version has been instantiated. Making it easier to keep
   * the workflow application up to date and possibly add an upgrade option
   * later.
   * @const VERSION
   */
  const VERSION = 'alpha';

  /**
   * The engine that does all the heavy lifting.
   *
   * Implemented like this to make it easier to swap to robo or something
   * similar later.
   *
   * @var EngineInterface
   *   The engine to be used to handle the underlying commands.
   */
  protected $engine;

  /**
   * All the properties for the project.
   *
   * @var \surangapg\HeavydComponents\Properties\PropertiesInterface
   *   Properties interface to handle to properties for the project.
   */
  protected $properties;

  /**
   * Creates and returns a fully functional heavyd application based on the current
   * data in a selected heavyd project (this is auto detected).
   *
   * @param ScopeInterface[] $scopes
   *   The various scopes available to the application.
   *
   * @return HeavydApplication
   *   Fully build application.
   *
   * @throws \Exception
   *   If the project scope was invalid. E.g when run in a tree that identifies
   *   as a heavyD project but without the needed marker to recognize the root.
   */
  public static function create(array $scopes = []) {

    if (!isset($scopes['project'])) {
      throw new \Exception("Couldn't locate .heavyd marker in any of the directories. Are you sure heavyd has been properly initialized?");
    }

    $properties = new Properties();
    $properties->setScopes($scopes, TRUE);

    // @TODO Swap out the engine with a docker capable one if relevant.
    $engine = new PhingEngine($properties->getBasePath());

    // Fully initialize the application with any extra data from the data file.
    $application = new self($engine, $properties);

    return $application;
  }

  /**
   * HeavydApplication constructor.
   *
   * @param \surangapg\Heavyd\Engine\EngineInterface $engine
   *   Engine to do all the heavy lifting.
   * @param \surangapg\HeavydComponents\Properties\PropertiesInterface $properties
   *   Properties set as loaded from the project.
   */
  public function __construct(EngineInterface $engine, PropertiesInterface $properties) {
    parent::__construct('HeavyD', static::VERSION);

    $this->engine = $engine;
    $this->properties = $properties;

    // Misc commands.
    $this->add(new MiscSetupCommand());
    $this->add(new MiscInstallCommand());
    $this->add(new MiscResetCommand());

    // Not all the items require additional services.
    // Those that do should list this property and we'll then add the docker
    // commands accordingly.
    // @TODO This should be replaced with a fully contained setup.
    if (isset($this->properties->get('project')['requires']['additional_docker_services'])
      && $this->properties->get('project')['requires']['additional_docker_services']) {
      $this->add(new SeleniumCommand());
    }
  }

  /**
   * @inheritdoc
   */
  public function add(Command $command)
  {
    $command = parent::add($command);

    if (isset($command)) {
      $command->addOption('silent-engine', 'S', InputOption::VALUE_NONE, 'Suppress all the output from the engine.');
    }
  }

  /**
   * Handle a run of a given command.
   *
   * @param InputInterface $input
   *   Input for the command.
   * @param OutputInterface $output
   *   Output generated by the command.
   *
   * @return int
   *   Exit code for the command being run.
   */
  public function doRun(InputInterface $input, OutputInterface $output) {

    $isSilentEngine = (true === $input->hasParameterOption(array('--silent-engine', '-S'), true));
    $this->getEngine()->setSilent($isSilentEngine);
    $this->getEngine()->setOutput($output);

    // Ensure that all the properties exist and are correct.
    $this->ensureProperties($input, $output);

    // Display some information about the properties as needed.
    $isInfo = (true === $input->hasParameterOption(array('--info', '-I'), true));
    if ($isInfo || $output->getVerbosity() >= OutputInterface::VERBOSITY_DEBUG) {

      $this->outputCurrentState(new SymfonyStyle($input, $output));

      if ($isInfo) {
        return 0;
      }
    }

    parent::doRun($input, $output);
  }

  /**
   * Checks or the property files have been generated and if not, generate them.
   *
   * Since the heavyd project reads the data from the generated properties
   * it's important to ensure they are generated.
   * To prevent bugs we'll add a small sanity check here and regenerate them
   * if needed.
   *
   * @param \Symfony\Component\Console\Input\InputInterface $input
   *   Input interface for this item.
   * @param \Symfony\Component\Console\Output\OutputInterface $output
   *   Output interface for this item.
   */
  protected function ensureProperties(InputInterface $input, OutputInterface $output) {
    $propertyFiles = glob($this->getProperties()->getBasePath() . '/properties/*.yml');

    if (count($propertyFiles) == 0) {
      $io = new SymfonyStyle($input, $output);
      $write = $io->confirm('The properties have not been generated yet, write them now?');

      if ($write) {
        $this->getEngine()->taskProjectWriteProperties();
        $this->reloadProperties();
      }
    }
  }

  /**
   * Rebuild the current properties.
   *
   * Flushes and rebuilds the properties. This will acount for any changes
   * made to the property set during the course of a single command run.
   * For example when a command resets an environment and then needs access to
   * the properties of the new environment.
   */
  public function reloadProperties() {
    $this->setProperties(Properties::create($this->getProperties()->getBasePath()));
  }

  /**
   * Outputs the current state to the cli.
   *
   * @param \Symfony\Component\Console\Style\SymfonyStyle $io
   *   Symfony style to use.
   */
  public function outputCurrentState(SymfonyStyle $io) {
    $projectProperties = $this->getProperties()->get('project');

    $io->writeln('<fg=yellow>Current state</>');
    $io->writeln(sprintf(' env: <fg=white>%s</>', $projectProperties['active']['env'] ? $projectProperties['active']['env'] : 'none'));
    $io->writeln(sprintf(' stage: <fg=white>%s</>', $projectProperties['active']['stage'] ? $projectProperties['active']['stage'] : 'none'));
    $io->writeln(sprintf(' site: <fg=white>%s</>', $projectProperties['active']['site'] ? $projectProperties['active']['site'] : 'none'));
    $io->newLine();

    $io->writeln('<fg=yellow>Current Engine</>');
    $io->writeln(sprintf(' engine: <fg=white>%s</>', get_class($this->engine)));
    $io->newLine();
  }

  /**
   * @return \surangapg\Heavyd\Engine\EngineInterface
   */
  public function getEngine() {
    return $this->engine;
  }

  /**
   * @param \surangapg\Heavyd\Engine\EngineInterface $engine
   */
  public function setEngine(EngineInterface $engine) {
    $this->engine = $engine;
  }

  /**
   * @return \surangapg\HeavydComponents\Properties\PropertiesInterface
   */
  public function getProperties() {
    return $this->properties;
  }

  /**
   * @param \surangapg\HeavydComponents\Properties\PropertiesInterface $properties
   */
  public function setProperties(PropertiesInterface $properties) {
    $this->properties = $properties;
  }

}
